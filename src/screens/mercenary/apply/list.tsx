import { Ionicons } from '@expo/vector-icons';
import { router } from 'expo-router';
import React, { useState } from 'react';
import { View, Text, ScrollView, TouchableOpacity, Alert } from 'react-native';

import { Card } from '@/src/components/card/card';
import { colors } from '@/src/theme/colors';
import { getDateOptions } from '@/src/utils/date';

import { styles } from './list_style';

export default function MercenaryFindScreen() {
  const [selectedPosition, setSelectedPosition] = useState<string>('');
  const [selectedDate, setSelectedDate] = useState<string>('all');
  const dateOptions = getDateOptions(new Date());

  const positions = [
    'Í≥®ÌÇ§Ìçº',
    'ÏÑºÌÑ∞Î∞±',
    'ÌíÄÎ∞±',
    'ÎØ∏ÎìúÌïÑÎçî',
    'ÏúôÏñ¥',
    'Ïä§Ìä∏ÎùºÏù¥Ïª§',
  ];

  const availableMatches = [
    {
      id: '1',
      teamName: 'ÌïúÎ¶ºÎåÄ Ïú†ÎÇòÏù¥Ìã∞Îìú',
      opponent: 'Í∞ïÏõêÎåÄÌïôÍµê Ï∂ïÍµ¨ÌåÄ',
      date: '2024-12-30',
      time: '14:00',
      location: 'ÌïúÎ¶ºÎåÄÌïôÍµê Ï∂ïÍµ¨Ïû•',
      positions: ['ÎØ∏ÎìúÌïÑÎçî', 'ÏúôÏñ¥'],
      level: 'ÏÑ∏ÎØ∏ÌîÑÎ°ú',
      description: 'Í≤ΩÌóòÏù¥ ÌíçÎ∂ÄÌïú ÏÑ†ÏàòÎì§ÏùÑ Ï∞æÍ≥† ÏûàÏäµÎãàÎã§.',
    },
    {
      id: '2',
      teamName: 'ÏÑ±Í∑†Í¥ÄÎåÄ ÌÇπÏä§',
      opponent: 'Í≥†Î†§ÎåÄ ÌÉÄÏù¥Í±∞Ï¶à',
      date: '2024-12-28',
      time: '15:00',
      location: 'ÏÑ±Í∑†Í¥ÄÎåÄÌïôÍµê Ï∂ïÍµ¨Ïû•',
      positions: ['Ïä§Ìä∏ÎùºÏù¥Ïª§'],
      level: 'ÌîÑÎ°ú',
      description: 'Í≥µÍ≤©Ï†ÅÏù∏ ÌîåÎ†àÏù¥Î•º ÏÑ†Ìò∏ÌïòÎäî ÏÑ†ÏàòÎ•º Ï∞æÏäµÎãàÎã§.',
    },
    {
      id: '3',
      teamName: 'Ïó∞ÏÑ∏ÎåÄ ÎùºÏù¥Ïò®Ï¶à',
      opponent: 'ÏÑúÏö∏ÎåÄ Ïù¥Í∏ÄÏä§',
      date: '2024-12-29',
      time: '16:00',
      location: 'Ïó∞ÏÑ∏ÎåÄÌïôÍµê Ï∂ïÍµ¨Ïû•',
      positions: ['Í≥®ÌÇ§Ìçº', 'ÏÑºÌÑ∞Î∞±'],
      level: 'ÏïÑÎßàÏ∂îÏñ¥',
      description: 'ÏàòÎπÑÏßÑÏùÑ Î≥¥Í∞ïÌïòÍ≥† Ïã∂ÏäµÎãàÎã§.',
    },
  ];

  const handleApply = (matchId: string) => {
    Alert.alert('Ïö©Î≥ë Ïã†Ï≤≠', 'Ïù¥ Îß§ÏπòÏóê Ïö©Î≥ëÏúºÎ°ú Ïã†Ï≤≠ÌïòÏãúÍ≤†ÏäµÎãàÍπå?', [
      { text: 'Ï∑®ÏÜå', style: 'cancel' },
      {
        text: 'Ïã†Ï≤≠',
        onPress: () => router.push(`/mercenary/apply?matchId=${matchId}`),
      },
    ]);
  };

  const filteredMatches = availableMatches.filter(match => {
    if (selectedPosition && !match.positions.includes(selectedPosition)) {
      return false;
    }
    if (selectedDate !== 'all' && match.date !== selectedDate) {
      return false;
    }
    return true;
  });

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Ionicons name="arrow-back" size={24} color={colors.text.main} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Ïö©Î≥ë Ï∞æÍ∏∞</Text>
        <View style={styles.placeholder} />
      </View>

      <View style={styles.dateFilterContainer}>
        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.dateFilterContent}
        >
          <TouchableOpacity
            style={[
              styles.allViewButton,
              selectedDate === 'all' && styles.selectedAllViewButton,
            ]}
            onPress={() => setSelectedDate('all')}
          >
            <Text
              style={[
                styles.allViewButtonText,
                selectedDate === 'all' && styles.selectedAllViewButtonText,
              ]}
            >
              Ï†ÑÏ≤¥ Î≥¥Í∏∞
            </Text>
          </TouchableOpacity>

          {dateOptions.map(dateOption => (
            <TouchableOpacity
              key={dateOption.value}
              style={[
                styles.dateButton,
                selectedDate === dateOption.value && styles.selectedDateButton,
              ]}
              onPress={() => setSelectedDate(dateOption.value)}
            >
              <Text
                style={[
                  styles.dateButtonText,
                  selectedDate === dateOption.value &&
                    styles.selectedDateButtonText,
                ]}
              >
                {dateOption.label}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>

      <View style={styles.filterSection}>
        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          style={styles.filterScroll}
        >
          <TouchableOpacity
            style={[
              styles.filterButton,
              selectedPosition === '' && styles.filterButtonActive,
            ]}
            onPress={() => setSelectedPosition('')}
          >
            <Text
              style={[
                styles.filterText,
                selectedPosition === '' && styles.filterTextActive,
              ]}
            >
              Ï†ÑÏ≤¥
            </Text>
          </TouchableOpacity>
          {positions.map(position => (
            <TouchableOpacity
              key={position}
              style={[
                styles.filterButton,
                selectedPosition === position && styles.filterButtonActive,
              ]}
              onPress={() => setSelectedPosition(position)}
            >
              <Text
                style={[
                  styles.filterText,
                  selectedPosition === position && styles.filterTextActive,
                ]}
              >
                {position}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>

      <ScrollView
        style={styles.scrollView}
        showsVerticalScrollIndicator={false}
      >
        {filteredMatches.length > 0 ? (
          filteredMatches.map(match => (
            <Card key={match.id} style={styles.matchCard}>
              <View style={styles.cardHeader}>
                <View style={styles.teamInfo}>
                  <Text style={styles.teamName}>{match.teamName}</Text>
                  <Text style={styles.opponent}>vs {match.opponent}</Text>
                </View>
                <View style={styles.levelBadge}>
                  <Text style={styles.levelText}>{match.level}</Text>
                </View>
              </View>

              <View style={styles.matchDetails}>
                <View style={styles.detailRow}>
                  <Ionicons
                    name="calendar-outline"
                    size={16}
                    color={colors.text.sub}
                  />
                  <Text style={styles.detailText}>{match.date}</Text>
                </View>
                <View style={styles.detailRow}>
                  <Ionicons
                    name="time-outline"
                    size={16}
                    color={colors.text.sub}
                  />
                  <Text style={styles.detailText}>{match.time}</Text>
                </View>
                <View style={styles.detailRow}>
                  <Ionicons
                    name="location-outline"
                    size={16}
                    color={colors.text.sub}
                  />
                  <Text style={styles.detailText}>{match.location}</Text>
                </View>
              </View>

              <View style={styles.positionsSection}>
                <Text style={styles.positionsLabel}>Î™®Ïßë Ìè¨ÏßÄÏÖò:</Text>
                <View style={styles.positionsContainer}>
                  {match.positions.map(position => (
                    <View key={position} style={styles.positionTag}>
                      <Text style={styles.positionText}>{position}</Text>
                    </View>
                  ))}
                </View>
              </View>

              <Text style={styles.description}>{match.description}</Text>

              <TouchableOpacity
                style={styles.applyButton}
                onPress={() => handleApply(match.id)}
              >
                <Text style={styles.applyButtonText}>Ïö©Î≥ë Ïã†Ï≤≠</Text>
              </TouchableOpacity>
            </Card>
          ))
        ) : (
          <View style={styles.emptyState}>
            <Text style={styles.emptyIcon}>üîç</Text>
            <Text style={styles.emptyTitle}>Ï°∞Í±¥Ïóê ÎßûÎäî Îß§ÏπòÍ∞Ä ÏóÜÏäµÎãàÎã§</Text>
            <Text style={styles.emptySubtitle}>Îã§Î•∏ Ï°∞Í±¥ÏúºÎ°ú Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî</Text>
          </View>
        )}
      </ScrollView>
    </View>
  );
}
